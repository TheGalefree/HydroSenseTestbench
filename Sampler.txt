/*
 * HydroSenseTestBench.c
 *
 *  Created on: Mar 19, 2021
 *      Author: Julian Dubeau
 */
// C library headers
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdint.h>
#include <sys/types.h>

// Linux headers
#include <fcntl.h> // Contains file controls like O_RDWR
#include <errno.h> // Error integer and strerror() function
#include <termios.h> // Contains POSIX terminal control definitions
#include <unistd.h> // write(), read(), close()

#define SAMPLE_SIZE 15
#define NUM_SAMPLES 4
#define ESC 27
#define BEG 1
#define END 4
typedef uint16_t sample_t;

typedef struct {
	uint16_t sequence;
	sample_t samples[NUM_SAMPLES];
} adc_data_t;

static uint16_t currentSequence = 0;
static uint16_t sampleNum = 0;
static bool start = false;
static bool firstStart = false;
static uint16_t syncCounter = 0;
static adc_data_t data[SAMPLE_SIZE];

/* discarded idea for enum
 typedef enum {
 ESC = 27, BEG = 1, END = 4
 } state_t;
 */
//static state_t state;
int main() {
// Open the serial port. Change device path as needed
	int serial_port = open("/dev/ttyO1", O_RDWR);

// Create new termios struc, we call it 'tty' for convention
	struct termios tty;

// Read in existing settings, and handle any error
	if (tcgetattr(serial_port, &tty) != 0) {
		printf("Error %i from tcgetattr: %s\n", errno, strerror(errno));
		return 1;
	}

	tty.c_cflag &= ~PARENB; // Clear parity bit, disabling parity (most common)
	tty.c_cflag &= ~CSTOPB; // Clear stop field, only one stop bit used in communication (most common)
	tty.c_cflag &= ~CSIZE; // Clear all bits that set the data size
	tty.c_cflag |= CS8; // 8 bits per byte (most common)
	tty.c_cflag &= ~CRTSCTS; // Disable RTS/CTS hardware flow control (most common)
	tty.c_cflag |= CREAD | CLOCAL; // Turn on READ & ignore ctrl lines (CLOCAL = 1)

	tty.c_lflag &= ~ICANON;
	tty.c_lflag &= ~ECHO; // Disable echo
	tty.c_lflag &= ~ECHOE; // Disable erasure
	tty.c_lflag &= ~ECHONL; // Disable new-line echo
	tty.c_lflag &= ~ISIG; // Disable interpretation of INTR, QUIT and SUSP
	tty.c_iflag &= ~(IXON | IXOFF | IXANY); // Turn off s/w flow ctrl
	tty.c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP | INLCR | IGNCR | ICRNL); // Disable any special handling of received bytes

	tty.c_oflag &= ~OPOST; // Prevent special interpretation of output bytes (e.g. newline chars)
	tty.c_oflag &= ~ONLCR; // Prevent conversion of newline to carriage return/line feed
// tty.c_oflag &= ~OXTABS; // Prevent conversion of tabs to spaces (NOT PRESENT ON LINUX)
// tty.c_oflag &= ~ONOEOT; // Prevent removal of C-d chars (0x004) in output (NOT PRESENT ON LINUX)

	tty.c_cc[VTIME] = 0;
	tty.c_cc[VMIN] = 2;

// Set in/out baud rate to be 115200
	cfsetispeed(&tty, B115200);
	cfsetospeed(&tty, B115200);

// Save tty settings, also checking for error
	if (tcsetattr(serial_port, TCSANOW, &tty) != 0) {
		printf("Error %i from tcsetattr: %s\n", errno, strerror(errno));
		return 1;
	}

// Allocate memory for read buffer, set size according to your needs
	uint16_t read_buf = 0;

	while (currentSequence < SAMPLE_SIZE) {

		//discarded method
		/*
		 if (read(serial_port, &read_buf, sizeof(read_buf)) < 0) {
		 printf("Error reading: %s", strerror(errno));
		 return 1;
		 } else {
		 state_t state = read_buf;
		 if (state == ESC) {
		 if (read(serial_port, &read_buf, sizeof(read_buf)) < 0) {
		 printf("Error reading: %s", strerror(errno));
		 return 1;
		 } else {
		 if (read_buf == BEG) {
		 for (size_t i = 0; i < NUM_SAMPLES + 1; i++) {
		 if (read(serial_port, &read_buf, sizeof(read_buf)) < 0) {
		 printf("Error reading: %s", strerror(errno));
		 return 1;
		 } else {
		 if (read_buf == ESC) {
		 switch (read_buf) {
		 case ESC:
		 //write escape to array
		 break;
		 case BEG:
		 //error BEG after END in data
		 break;
		 case END:
		 //end sequence
		 break;
		 default:
		 //error non existent command after escape
		 }
		 } else {
		 //write to array
		 }
		 }
		 }
		 if (start == true) {
		 //error no end sequence
		 }
		 } else {
		 //ESC but no BEG
		 }
		 }
		 } else {
		 //error ESC not detected
		 }
		 }*/

		// ERROR LIST:
		// 1: ERROR READING
		// 2: ESC ESC WITH NO START
		// 3: ESC BEG DETECTED WHILE WRITING
		// 4: ESC END DETECTED WHILE NOT WRITING
		// 5: NON-EXISTeNT COMMAND FOLLOWING ESC
		// 6: TOO MANY SAMPLES WITHOUT END SEQUENCE
		// 7: NO ESC DETECTED WHILE NOT WRITING
		// 8: ERROR CLOSING FILE
		//method 2
		if (read(serial_port, &read_buf, sizeof(read_buf)) < 0) { //read and check for read error
			printf("Error reading: %s\n", strerror(errno));
			return 1;
		} else {
			if (read_buf == ESC) { //check for ESC
				if (read(serial_port, &read_buf, sizeof(read_buf)) < 0) { //read
					printf("Error reading: %s\n", strerror(errno));
					return 1;
				} else {
					switch (read_buf) { //switch case based on what follows ESC
					case ESC:
						if (start) { //if ESC again then write escape to array if we've started writing
							if (firstStart) {
								data[currentSequence].sequence = read_buf; //if first start then write to sequence number
								//TO-DO check if sequence matches
								firstStart = false;
							} else {
								data[currentSequence].samples[sampleNum] = read_buf; //if not first start then write to samples
								sampleNum++;
							}
						} else {
							printf("Error: ESC ESC with no start.\n");
							return 2;
						}
						break;
					case BEG:
						if (!start) { //if BEG then start writing
							start = true;
							firstStart = true;
						} else {
							printf("Error: ESC BEG detected while writing.\n");
							return 3;
						}
						break;
					case END:
						if (start) { //if END then finish writing, increment, and reset sample counter
							start = false;
							sampleNum = 0;
							currentSequence++;
						} else {
							printf("Error: ESC END detected while not writing.\n");
							return 4;
						}
						break;
					default:
						printf("Error: Non-existent command following ESC.\n");
						return 5;
					}
				}
			} else {
				if (start) {
					if (firstStart) { //if first start then write to sequence number
						data[currentSequence].sequence = read_buf;
						firstStart = false;
						if (currentSequence != read_buf) { //check if sequence matches
							syncCounter++;
						}
					} else { //if not first start then write to samples
						if (sampleNum < NUM_SAMPLES) { //first check if too many samples
							data[currentSequence].samples[sampleNum] = read_buf;
							sampleNum++;
						} else {
							printf("Error: Too many samples without end sequence.\n");
							return 6;
						}
					}
				} else {
					printf("Error: No ESC detected while not writing.\n");
					return 7;
				}
			}
		}
	}

	FILE *fp;
	fp = fopen("datafile.txt", "w+");
	for (size_t i=0; i < SAMPLE_SIZE; i++) {
		fprintf(fp, "Sequence: %i\n", data[i].sequence);
		fprintf(fp, "Sample 1: %x\n", data[i].samples[sampleNum++]);
		fprintf(fp, "Sample 2: %x\n", data[i].samples[sampleNum++]);
		fprintf(fp, "Sample 3: %x\n", data[i].samples[sampleNum++]);
		fprintf(fp, "Sample 4: %x\n", data[i].samples[sampleNum]);
		sampleNum = 0;
	}
	if (fclose(fp) < 0) {
		printf("Error: Error closing file.\n");
		return 8;
	}

	close(serial_port);
	if (syncCounter > 0) {
		printf("Warning: Out of sync detected %i times.", syncCounter);
	} else {
		printf("SUCCESSSSS\n");
	}
	return 0; // success
}